此题本来就符合中序遍历
然后在外面定义一个sum = 0
就可以很简单的遍历一遍 然后把符合的值相加
得出答案sum
C#代码如下：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    int sum = 0;
    public int RangeSumBST(TreeNode root, int low, int high) {
        if(root == null){
            return 0;
        }
        RangeSumBST(root.left,low,high);
        if(root.val >= low && root.val <= high){
            sum += root.val;
        }
		//根据中序遍历的规律   后面的值都一定大于high 不需要看了
        if(root.val > high){
            return sum;
        }
        RangeSumBST(root.right,low,high);
        return sum;
    }

}

但是这样就没有使用二叉搜索树的特性
而且不只中序遍历，前序遍历，后序遍历也均可
因此我们可以在root.val大于high 的时候只看此树的左子树
可以在root.val小于low的时候只看此树的右子树
这样此递归方法就符合题意了（即返回位于[low,high]之间所有节点的和）
C#代码如下：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int RangeSumBST(TreeNode root, int low, int high) {
        if(root == null){
            return 0;
        }
        if(root.val > high){
            return RangeSumBST(root.left,low,high);
        }
        if(root.val < low){
            return RangeSumBST(root.right,low,high);
        }
        return root.val + RangeSumBST(root.left,low,high) + RangeSumBST(root.right,low,high);
    }

}