就按照要求慢慢处理原数即可
特别需要关注的数字有9，5，4
C#代码如下：
public class Solution {
    public string IntToRoman(int num) {
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<num / 1000;i++){
            sb.Append("M");
        }
        num = num % 1000;
        if(num >=900){
            sb.Append("CM");
            num = num % 900;
        }else if(num>= 500){
            sb.Append("D");
            num = num % 500;
        }else if(num >= 400){
            sb.Append("CD");
            num = num % 400;
        }
        
        for(int i = 0;i<num/100;i++){
            sb.Append("C");
        }
        num = num % 100;

        if(num >=90){
            sb.Append("XC");
            num = num % 90;
        }else if(num>= 50){
            sb.Append("L");
            num = num % 50;
        }else if(num >= 40){
            sb.Append("XL");
            num = num % 40;
        }
        for(int i = 0;i<num/10;i++){
            sb.Append("X");
        }
        num = num % 10;

        if(num >=9){
            sb.Append("IX");
            num = num % 9;
        }else if(num>= 5){
            sb.Append("V");
            num = num % 5;
        }else if(num >= 4){
            sb.Append("IV");
            num = num % 4;
        }
        for(int i = 0;i<num;i++){
            sb.Append("I");
        }

        return sb.ToString();
    }
}

然后可以优化一下
官方的Java代码如下：
class Solution {
    int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
    String[] symbols = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};

    public String intToRoman(int num) {
        StringBuffer roman = new StringBuffer();
        for (int i = 0; i < values.length; ++i) {
            int value = values[i];
            String symbol = symbols[i];
            while (num >= value) {
                num -= value;
                roman.append(symbol);
            }
            if (num == 0) {
                break;
            }
        }
        return roman.toString();
    }
}