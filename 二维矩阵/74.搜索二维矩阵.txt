由于该二维数组满足前一行的最后一个数小于等于后一行的第一个数
且同一行满足左边小于右边

因此完全可以将其看做一个有序数组
故可以想到高效的查找算法即二分查找

C#代码如下：

public class Solution {
    public bool SearchMatrix(int[][] matrix, int target) {
        int m = matrix.Length, n = matrix[0].Length;
        int low = 0, high = m * n - 1;

        while (low <= high) {
            int mid = (high - low) / 2 + low;
            int x = matrix[mid / n][mid % n];
            if (x < target) {
                low = mid + 1;
            } else if (x > target) {
                high = mid - 1;
            } else {
                return true;
            }
        }

        return false;
    }
}