其实我疑惑了很久该如何去删除一个数，令当前的数保证最小
首先我很肯定的是若前k位内有0就必定先把0前面的全部删掉
这样必定会比正常删多删除一位  这样就必定会小一些
然后我观察num = "1432219" k=3
发现如果要删除的话是4,3,2 这样的顺序删除的 就是 1219
然后我想着k=4呢  应该是继续删除2 就是119
然后k=5 就应该是删除9了  就变成了11
然后就发现了规律  如果num[i] > num[j]  那么就应该删除i位置数字
反之 继续往后找  如果到了末尾还没满足上述的条件   就应该是删除最后几个
然后我就使用递归的思路去做	每次递归找一个数
C#代码如下：
public class Solution {
    public string RemoveKdigits(string num, int k) {
        int len = num.Length;
        if(len <= k){
            return "0";
        }
        //去除最前面为0的值
        while(num[0] == '0' && len>1){
            num = num.Substring(1,--len);
        }
        if(k == 0){
            return num;
        }

        //字符串前k位中有0时
        for(int i=1;i<=k;i++){
            if(num[i] == '0'){
                return RemoveKdigits(num.Substring(i+1),k-i);
            }
        }
        int left = 0,right =1;
        while(num[left] <= num[right] && right < len-1){
            left++;
            right++;
        }

        if(num[left] <= num[right]){
            return num.Substring(0,len-k);
        }else{
            return RemoveKdigits(num.Substring(0,left)+num.Substring(right),k-1);
        }

    }
}

然后做完发现  这就是单调栈的思路啊
将小的值压入栈底，若发现小于栈顶的值  将栈顶的值删除
然后最后做完后  若将栈的值一个一个取出后还需要进行翻转
所以可以使用双端队列
官方java代码如下：
class Solution {
    public String removeKdigits(String num, int k) {
        Deque<Character> deque = new LinkedList<Character>();
        int length = num.length();
        for (int i = 0; i < length; ++i) {
            char digit = num.charAt(i);
            while (!deque.isEmpty() && k > 0 && deque.peekLast() > digit) {
                deque.pollLast();
                k--;
            }
            deque.offerLast(digit);
        }
        
        for (int i = 0; i < k; ++i) {
            deque.pollLast();
        }
        
        StringBuilder ret = new StringBuilder();
        boolean leadingZero = true;
        while (!deque.isEmpty()) {
            char digit = deque.pollFirst();
            if (leadingZero && digit == '0') {
                continue;
            }
            leadingZero = false;
            ret.append(digit);
        }
        return ret.length() == 0 ? "0" : ret.toString();
    }
}