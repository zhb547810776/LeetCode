按照题意可以拼接两段字符串
即从[0,k] [k,nums.Length]
C#代码如下：
public class Solution {
    public string ReverseLeftWords(string s, int n) {
        return  s.Substring(n) + s.Substring(0,n);
    }
}

换个思路可以将两段s拼接起来  取[n,nums.Length+n]的
public class Solution {
    public string ReverseLeftWords(string s, int n) {
        return  (s+s).Substring(n,nums.Length);
    }
}

但是若是不使用Substring方法的话
可以反转字符串
先全部反转
然后反转[0,nums.Length-n] 最后反转[nums.Length-n,nums.Length]
C#代码如下：
public class Solution {
    public string ReverseLeftWords(String s, int n) {
        int len = s.Length;
        char[] chars = s.ToCharArray();
        reverse(chars, 0, len - 1);//先反转全部的元素
        reverse(chars, 0, len - n - 1);//在反转前length - n个元素
        reverse(chars, len - n, len - 1);//接着反转剩余的
        return new String(chars);
    }

//把数组中从[start，end]之间的元素两两交换,也就是反转
    private void reverse(char[] chars, int start, int end) {
        while (start < end) {
            char temp = chars[start];
            chars[start++] = chars[end];
            chars[end--] = temp;
        }
    }
}

或者是使用StringBuilder追加字符串
先加入[k,nums.Length]然后加入[0,k]
public class Solution {
    public string ReverseLeftWords(string s, int n) {
        int len = s.Length;
        StringBuilder res = new StringBuilder(); 
        
        for(int i = n; i < len; i++){
            res.Append(s[i]);
        }
         for(int i = 0; i < n; i++){
            res.Append(s[i]);
        }
        return res.ToString();
    }
}

亦或者直接String res="" 然后追加
由于字符串是 “不可变对象”  所以会使用大量空间去新建一个字符串
数据量大时造成效率低下
public class Solution {
    public string ReverseLeftWords(string s, int n) {
        int len = s.Length;
        String res = ""; 

        for(int i = n; i < len; i++){
            res += s[i];
        }
         for(int i = 0; i < n; i++){
            res += s[i];
        }
        return res.ToString();
    }
}

然后从题解学到了可以根据取余算法简化代码
public class Solution {
    public string ReverseLeftWords(string s, int n) {
        int len = s.Length;
        StringBuilder res = new StringBuilder(); 
        
        for(int i = n; i < len+n; i++){
            res.Append(s[i%len]);
        }

        return res.ToString();
    }
}
