首先最先想到的就是循环
public class Solution {
    public bool IsPowerOfTwo(int n) {
        if(n <= 0){
            return false;
        }
        while(n > 1){
            if(n%2==1){
                return false;
            }
            n /= 2;
        }

        return true;
    }
}
然后题目要求不要循环或递归的话如何实现
由于可知2^x如果使用二进制来表示必定是形如100000这样的   只有最前头有一个1
那么我们便可以判断n&(n-1) == 0 来判断这个数是否是2的幂
public class Solution {
    public bool IsPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }
}
然后看题解还有一种 n&(-n)
public class Solution {
    public bool IsPowerOfTwo(int n) {
        return n > 0 && (n & -n) == n;
    }
}

同时我们也可以知道本题的最大值一定是2^30
因此我们可以计算n是否可以被该数整除
public class Solution {
    const int BIG = 1 << 30;

    public bool IsPowerOfTwo(int n) {
        return n > 0 && BIG % n == 0;
    }
}