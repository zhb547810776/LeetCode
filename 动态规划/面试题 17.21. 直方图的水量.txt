方法1
可知每个点的蓄水量需要先算出由它左右两边的最高值中的较低的一边
然后减去自身的高度
因此先求出leftMax[]和rightMax[]
然后进行一边遍历即可解出答案
C#代码如下：
public class Solution {
    public int Trap(int[] height) {
        if(height.Length == 0){
            return 0;
        }
        int []leftMax = new int[height.Length];
        int []rightMax = new int[height.Length];

        //计算该点右边的最大值  且rightMax[height.Length-1] = height[height.Length-1];
        rightMax[height.Length-1] = height[height.Length-1];
        for(int i=height.Length-2;i>=0;i--){
            rightMax[i] = Math.Max(rightMax[i+1],height[i]);
        }
        //计算该点左边的最大值  且可知leftMax[0] = height[0];
        //然后计算能够蓄水的总值
        leftMax[0] = height[0];
        int sum = 0;
        for(int i=1;i<height.Length;i++){
            leftMax[i] = Math.Max(leftMax[i-1],height[i]);
            sum += Math.Min(leftMax[i],rightMax[i]) - height[i];
        }

        return sum;
    }
}

方法2 单调栈
从左到右遍历时，比较此下标对应的高度的值，将较大值的下标压入栈底，碰到小于栈顶的值就入栈
否则就将栈顶的值出栈，然后计算高和宽
高为此时的i值和出栈后的新栈顶的值中的较小者减去出栈的值   即Math.Min(height[stack.Peek()],height[i]) 
宽即为此时的i值减去新栈顶的下标值-1		即i - stack.Peek() - 1;
还要注意，一次计算完毕后，手动将i--   用来判断新栈顶的高度值是否仍然小于此时的i的高度
C#代码如下：
public class Solution {
    public int Trap(int[] height) {
        Stack<int> stack = new Stack<int>();
        int sum = 0;
        for(int i = 0;i<height.Length;i++){
            if(stack.Count == 0){
                stack.Push(i);
                continue;
            }

            if(height[stack.Peek()] >= height[i]){
                stack.Push(i);
            }else{
                if(stack.Count >= 2){
                    int h = height[stack.Pop()];
                    int width = i - stack.Peek() - 1;
                    sum += (Math.Min(height[stack.Peek()],height[i]) - h) * width;
                    //重来一次，看新的栈顶值是否仍然小于此处的值
                    i--;
                }else{
                    stack.Pop();
                    stack.Push(i);
                }
            }

        }

        return sum;
    }
}
方法3 双指针
此方法从方法1的基础上减少了空间消耗
由于方法1中是判断i点时  leftMax[i] 和 rightMax[i] 中的较小值
可以使用左右两个指针以及两个变量存储左右两边遍历过的最大值
然后判断左右两个指针的高度  低的那边移动一格，并使用该边已经遍历过的 最大值-该点的值 算出雨水量
两个指针会在最高点相遇 此时已经计算出雨水总量
C#代码如下：
public class Solution {
    public int Trap(int[] height) {
        if(height.Length == 0){
            return 0;
        }
        int left = 0,right = height.Length-1;
        int leftMax = height[left],rightMax = height[right];
        int sum = 0;

        while(left<right){
            if(height[left] < height[right]){
                sum += leftMax - height[left];
                left++;
                leftMax = Math.Max(leftMax,height[left]);
            }else{
                sum += rightMax - height[right];
                right--;
                rightMax = Math.Max(rightMax,height[right]);
            }
        }

        return sum;
    }
}