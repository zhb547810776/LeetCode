定义一个dp[i+1,j+1]的二维数组
来存储nums1到i 与 nums2到j时候的最大值
然后可以知道dp[0,0]时两边都是空的  所以是0
然后我们可以知道当nums[i] == nums[j]时	dp[i,j] = dp[i-1,j-1]+1
而当nums[i] != nums[j] 时 应该取nums[i-1,j] 和 nums[i,j-1]中的较大值
然后返回dp[i+1,j+1] 即可
C#代码如下：
public class Solution {
    public int MaxUncrossedLines(int[] nums1, int[] nums2) {
        int [,]dp = new int [nums1.Length+1,nums2.Length+1];
        dp[0,0] = 0;

        for(int i=1;i<=nums1.Length;i++){
            int num1 = nums1[i-1];
            for(int j=1;j<=nums2.Length;j++){
                int num2 = nums2[j-1];
                if(num1 == num2){
                    dp[i,j] = dp[i-1,j-1]+1;
                }else{
                    dp[i,j] = Math.Max(dp[i-1,j],dp[i,j-1]);
                }
            }
        }

        return dp[nums1.Length,nums2.Length];
    }
}