本题最易想到的方法就是双重循环
暴力遍历所有答案  记录最大的
然后我想不出O(n)时间的方式解决问题
我只能够在暴力的基础上进行一定的优化
我们可以思考两个数异或后最大的话
一定是使得nums数组中存在的最高位一定为1
就比如[31,15,7,3,1]这样的数组
即11111 1111 111 11 1
我们若要两个数异或取最大为
一定会选到31	因为它的最大位数大于其他的数	但我们也要知道16~31的值的最大位数其实是一样的
我们可以根据这样思想去找出数组中最大位数的所有数
然后对这些数进行暴力枚举	即可进行一定程度的优化
C#代码如下：
public class Solution {
    public int FindMaximumXOR(int[] nums) {
        int len = nums.Length;
        int max = 0;
        for(int i=0;i<len;i++){
            max = Math.Max(max,nums[i]);
        }
        int bit = 1;
        while(max>0){
            max /=2;
            if(max > 0){
                bit = bit*2;
            }
        }
        IList<int> list = new List<int>();
        for(int i=0;i<len;i++){
            if(nums[i] / bit > 0){
                list.Add(nums[i]);
            }
        }
        int res = 0;
        foreach(int item in list){
            for(int i=0;i<len;i++){
                res = Math.Max(res,nums[i] ^ item);
            }
        }

        return res;
    }
}

5.30补充
已知最大位是30位  因此可以从30位一位一位的遍历到最低位
去记录可以为1的位置
因为是求最大值  因此高位能为1则为1
然后可以使用一个值来记录当前的位数
可以将原来记录的值 xNext = x>>1+1
即多一位且最低位为1
若存在满足的值	则1保存
否则此位为0
使用文字不好解释	推荐阅读代码
官方C#代码如下：
public class Solution {
    // 最高位的二进制位编号为 30
    const int HIGH_BIT = 30;

    public int FindMaximumXOR(int[] nums) {
        int x = 0;
        for (int k = HIGH_BIT; k >= 0; --k) {
            ISet<int> seen = new HashSet<int>();
            // 将所有的 pre^k(a_j) 放入哈希表中
            foreach (int num in nums) {
                // 如果只想保留从最高位开始到第 k 个二进制位为止的部分
                // 只需将其右移 k 位
                seen.Add(num >> k);
            }

            // 目前 x 包含从最高位开始到第 k+1 个二进制位为止的部分
            // 我们将 x 的第 k 个二进制位置为 1，即为 x = x*2+1
            int xNext = x * 2 + 1;
            bool found = false;
            
            // 枚举 i
            foreach (int num in nums) {
                if (seen.Contains(xNext ^ (num >> k))) {
                    found = true;
                    break;
                }
            }

            if (found) {
                x = xNext;
            } else {
                // 如果没有找到满足等式的 a_i 和 a_j，那么 x 的第 k 个二进制位只能为 0
                // 即为 x = x*2
                x = xNext - 1;
            }
        }
        return x;
    }
}