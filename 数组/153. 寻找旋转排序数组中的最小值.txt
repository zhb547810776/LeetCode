寻找最小值  便基本都是使用对分查找方法了
数组原本是升序的数组
因此符合nums[i] > num[i-1]便找到了最小值
C#代码如下：
public class Solution {
    public int FindMin(int[] nums) {
        int len = nums.Length;
        if(len == 1){
            return nums[0];
        }
        if(len == 2){
            return nums[0] < nums[1] ? nums[0]:nums[1];
        }
		//判断最小值是否在两边
        if(nums[0]>nums[len-1]){
            if(nums[len-1] < nums[len-2]){
                return nums[len-1];
            }
        }else{
            if(nums[0] < nums[1]){
                return nums[0];
            }
        }

        int l = 0,r = len - 1;

        while(l <= r){
            int mid = (l+r) / 2;
			//等于0的值已经判断过  防止下标越界
            if(mid == 0){
                mid++;
            }
            if(nums[mid]<nums[mid-1]){
                return nums[mid];
            }
            if(nums[mid] < nums[len-1]){
                r=mid-1;
            }else{
                l=mid+1;
            }
        }

        return 0;
    }
}

但以上代码还是太多了  并不优雅
附上题解的Java代码：
class Solution {
    public int findMin(int[] nums) {
        int low = 0;
        int high = nums.length - 1;
        while (low < high) {
            int pivot = low + (high - low) / 2;
            if (nums[pivot] < nums[high]) {
                high = pivot;
            } else {
                low = pivot + 1;
            }
        }
        return nums[low];
    }
}